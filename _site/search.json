[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My name is Bryan. Welcome to my quarto quarto website.",
    "section": "",
    "text": "Work in progress…."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands on exercise/Hands-on-exercise 0/Hands-on-exercise-0.html",
    "href": "Hands on exercise/Hands-on-exercise 0/Hands-on-exercise-0.html",
    "title": "Hands-On-Exercise-00: Working with tidyverse",
    "section": "",
    "text": "Getting started\nLoading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)\n\n\nThe downloaded binary packages are in\n    /var/folders/wv/lb5xz_ns1kq9cz1cgz2ltd040000gn/T//Rtmpt7Uaz6/downloaded_packages"
  },
  {
    "objectID": "Hands on exercise/Hands-on-exercise 0/Hands-on-exercise-0.html#quarto",
    "href": "Hands on exercise/Hands-on-exercise 0/Hands-on-exercise-0.html#quarto",
    "title": "Hands-On-Exercise-00: Working with tidyverse",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Hands on exercise/Hands-on-exercise 0/Hands-on-exercise-0.html#running-code",
    "href": "Hands on exercise/Hands-on-exercise 0/Hands-on-exercise-0.html#running-code",
    "title": "Hands-On-Exercise-00: Working with tidyverse",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "Hands-on-exercise/Hands-on-exercise 0/Hands-on-exercise-0.html",
    "href": "Hands-on-exercise/Hands-on-exercise 0/Hands-on-exercise-0.html",
    "title": "Hands-On-Exercise-00: Working with tidyverse",
    "section": "",
    "text": "Getting started\nLoading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)\n\nImporting data\n\nrealis_csv &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read.csv(\"data/PopData2019_fat.csv\")\n\nPivoting data\n\npopdata_long &lt;- popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\nworking with dplyr\n\nrealis2019_selected &lt;- realis_csv %&gt;%\n  select('Project Name',\n         'Transacted Price ($)',\n         'Type of Sale',\n         'Unit Price ($ psm)',\n         'Property Type')\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter('Property Type' == \"Condominium\" |\n  'Property Type' == \"Apartment\") %&gt;%\n  filter('Type of Sale' == \"New Sale\") %&gt;%\n  filter('Unit Price ($ psm)' &lt;= 13000)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_0/Hands_On_Exercise_0.html",
    "href": "Hands_On_Exercise/Hands_On_Exercise_0/Hands_On_Exercise_0.html",
    "title": "Hands-On-Exercise-00: Working with tidyverse",
    "section": "",
    "text": "Getting started\nLoading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)\n\nImporting data\n\nrealis_csv &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read.csv(\"data/PopData2019_fat.csv\")\n\nPivoting data\n\npopdata_long &lt;- popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\")\n\nworking with dplyr\n\nrealis2019_selected &lt;- realis_csv %&gt;%\n  select('Project Name',\n         'Transacted Price ($)',\n         'Type of Sale',\n         'Unit Price ($ psm)',\n         'Property Type')\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter('Property Type' == \"Condominium\" |\n  'Property Type' == \"Apartment\") %&gt;%\n  filter('Type of Sale' == \"New Sale\") %&gt;%\n  filter('Unit Price ($ psm)' &lt;= 13000)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html",
    "title": "Hands_On_Exercise_3",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html",
    "title": "Hands_On_Exerise_4",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#installing-and-loading-the-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#installing-and-loading-the-packages",
    "title": "Hands_On_Exerise_4",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-the-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-the-data",
    "title": "Hands_On_Exerise_4",
    "section": "",
    "text": "exam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands_On_Exerise_4",
    "section": "Plotting ridgeline graph: ggridges method",
    "text": "Plotting ridgeline graph: ggridges method\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands_On_Exerise_4",
    "section": "Varying fill colors along the x axis",
    "text": "Varying fill colors along the x axis\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands_On_Exerise_4",
    "section": "Mapping the probabilities directly onto colour",
    "text": "Mapping the probabilities directly onto colour\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands_On_Exerise_4",
    "section": "Ridgeline plots with quantile lines",
    "text": "Ridgeline plots with quantile lines\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-a-half-eye-graph",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-a-half-eye-graph",
    "title": "Hands_On_Exerise_4",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands_On_Exerise_4",
    "section": "Adding the boxplot with geom_boxplot()",
    "text": "Adding the boxplot with geom_boxplot()\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands_On_Exerise_4",
    "section": "Adding the Dot Plots with stat_dots()",
    "text": "Adding the Dot Plots with stat_dots()\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#finishing-touch",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#finishing-touch",
    "title": "Hands_On_Exerise_4",
    "section": "Finishing touch",
    "text": "Finishing touch\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`)."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-packages-and-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-packages-and-data",
    "title": "Hands_On_Exerise_4",
    "section": "Importing packages and data",
    "text": "Importing packages and data\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#one-sample-test-gghistostats-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#one-sample-test-gghistostats-method",
    "title": "Hands_On_Exerise_4",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands_On_Exerise_4",
    "section": "Two-sample mean test: ggbetweenstats()",
    "text": "Two-sample mean test: ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands_On_Exerise_4",
    "section": "Oneway ANOVA Test: ggbetweenstats() method",
    "text": "Oneway ANOVA Test: ggbetweenstats() method\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands_On_Exerise_4",
    "section": "Significant test of correlation: ggscatterstats()",
    "text": "Significant test of correlation: ggscatterstats()\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#significant-test-of-association-ggbarstats-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#significant-test-of-association-ggbarstats-methods",
    "title": "Hands_On_Exerise_4",
    "section": "Significant test of association: ggbarstats() methods",
    "text": "Significant test of association: ggbarstats() methods\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-data-and-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-data-and-packages",
    "title": "Hands_On_Exerise_4",
    "section": "Importing data and packages",
    "text": "Importing data and packages\n\npacman::p_load(readxl, performance, parameters, see)\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#multiple-regression-model-using-lm",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#multiple-regression-model-using-lm",
    "title": "Hands_On_Exerise_4",
    "section": "Multiple Regression Model using lm()",
    "text": "Multiple Regression Model using lm()\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands_On_Exerise_4",
    "section": "Model Diagnostic: checking for multicolinearity",
    "text": "Model Diagnostic: checking for multicolinearity\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands_On_Exerise_4",
    "section": "Model Diagnostic: checking normality assumption",
    "text": "Model Diagnostic: checking normality assumption\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Complete check\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-the-data-and-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-the-data-and-packages",
    "title": "Hands_On_Exerise_4",
    "section": "Importing the data and packages",
    "text": "Importing the data and packages\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands_On_Exerise_4",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands_On_Exerise_4",
    "section": "Plotting standard error bars of point estimates",
    "text": "Plotting standard error bars of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands_On_Exerise_4",
    "section": "Plotting confidence interval of point estimates",
    "text": "Plotting confidence interval of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands_On_Exerise_4",
    "section": "Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "Visualizing the uncertainty of point estimates with interactive error bars\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#installing-ungeviz-package",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#installing-ungeviz-package",
    "title": "Hands_On_Exerise_4",
    "section": "Installing ungeviz package",
    "text": "Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (d43afb69) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\nlibrary(ungeviz)\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-packages-and-data-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#importing-packages-and-data-1",
    "title": "Hands_On_Exerise_4",
    "section": "Importing packages and data",
    "text": "Importing packages and data\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#funnelplotr-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#funnelplotr-methods",
    "title": "Hands_On_Exerise_4",
    "section": "FunnelPlotR methods",
    "text": "FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#funnelplotr-methods-makeover-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#funnelplotr-methods-makeover-1",
    "title": "Hands_On_Exerise_4",
    "section": "FunnelPlotR methods: Makeover 1",
    "text": "FunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#funnelplotr-methods-makeover-2",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#funnelplotr-methods-makeover-2",
    "title": "Hands_On_Exerise_4",
    "section": "FunnelPlotR methods: Makeover 2",
    "text": "FunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands_On_Exerise_4",
    "section": "Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "Calculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-a-static-funnel-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#plotting-a-static-funnel-plot",
    "title": "Hands_On_Exerise_4",
    "section": "Plotting a static funnel plot",
    "text": "Plotting a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exerise_4.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands_On_Exerise_4",
    "section": "Interactive Funnel Plot: plotly + ggplot2",
    "text": "Interactive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-loading-the-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-loading-the-packages",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.2.1 Installing and loading the packages",
    "text": "9.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-the-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-the-data",
    "title": "Hands_On_Exercise_4",
    "section": "",
    "text": "exam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.3.1 Plotting ridgeline graph: ggridges method",
    "text": "9.3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridgespackage.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.3.2 Varying fill colors along the x axis",
    "text": "9.3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.3.3 Mapping the probabilities directly onto colour",
    "text": "9.3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.3.4 Ridgeline plots with quantile lines",
    "text": "9.3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-a-half-eye-graph",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-a-half-eye-graph",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.4.1 Plotting a Half Eye graph",
    "text": "9.4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.4.2 Adding the boxplot with geom_boxplot()",
    "text": "9.4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.4.3 Adding the Dot Plots with stat_dots()",
    "text": "9.4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#finishing-touch",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#finishing-touch",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.4.4 Finishing touch",
    "text": "9.4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`)."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-packages-and-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-packages-and-data",
    "title": "Hands_On_Exercise_4",
    "section": "Importing packages and data",
    "text": "Importing packages and data\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#one-sample-test-gghistostats-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#one-sample-test-gghistostats-method",
    "title": "Hands_On_Exercise_4",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.6 Two-sample mean test: ggbetweenstats()",
    "text": "10.3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "10.3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "10.3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#significant-test-of-association-ggbarstats-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#significant-test-of-association-ggbarstats-methods",
    "title": "Hands_On_Exercise_4",
    "section": "Significant test of association: ggbarstats() methods",
    "text": "Significant test of association: ggbarstats() methods\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-data-and-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-data-and-packages",
    "title": "Hands_On_Exercise_4",
    "section": "Importing data and packages",
    "text": "Importing data and packages\n\npacman::p_load(readxl, performance, parameters, see)\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#multiple-regression-model-using-lm",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#multiple-regression-model-using-lm",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.2 Multiple Regression Model using lm()",
    "text": "10.6.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.3 Model Diagnostic: checking for multicolinearity:",
    "text": "10.6.3 Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_n &lt;- check_collinearity(model)\nplot(check_n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.4 Model Diagnostic: checking normality assumption",
    "text": "10.6.4 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\nFor confidence bands, please install `qqplotr`."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-the-data-and-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-the-data-and-packages",
    "title": "Hands_On_Exercise_4",
    "section": "Importing the data and packages",
    "text": "Importing the data and packages\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands_On_Exercise_4",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.3.1 Plotting standard error bars of point estimates",
    "text": "11.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.3.2 Plotting confidence interval of point estimates",
    "text": "11.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "11.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-ungeviz-package",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-ungeviz-package",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.5.1 Installing ungeviz package",
    "text": "11.5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (d43afb69) has not changed since last install.\n  Use `force = TRUE` to force installation"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-packages-and-data-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-packages-and-data-1",
    "title": "Hands_On_Exercise_4",
    "section": "Importing packages and data",
    "text": "Importing packages and data\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.4 FunnelPlotR methods",
    "text": "12.4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods-makeover-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods-makeover-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.4.2 FunnelPlotR methods: Makeover 1",
    "text": "12.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods-makeover-2",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods-makeover-2",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.4.3 FunnelPlotR methods: Makeover 2",
    "text": "12.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "12.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-a-static-funnel-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#plotting-a-static-funnel-plot",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.5.3 Plotting a static funnel plot",
    "text": "12.5.3 Plotting a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "12.5.4 Interactive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#r-graphics-vs-ggplot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#r-graphics-vs-ggplot",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics vs ggplot",
    "text": "1.3.1 R Graphics vs ggplot\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#a-layered-grammar-of-graphics",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#a-layered-grammar-of-graphics",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-geom_bar",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-geom_bar",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom_dotplot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom_dotplot",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2 Geometric Objects using geom_dotplot",
    "text": "1.7.2 Geometric Objects using geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\nRemove the y-axis and adjust the binwidth\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom_histogram",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom_histogram",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3 Geometric objects using geom_histogram",
    "text": "1.7.3 Geometric objects using geom_histogram\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom-density",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom-density",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6 Geometric Objects using geom-density()",
    "text": "1.7.6 Geometric Objects using geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fillarguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-object-using-geom_boxplot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-object-using-geom_boxplot",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7 Geometric object using geom_boxplot",
    "text": "1.7.7 Geometric object using geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nIncluding notches to help assess whether the medians of distribution differ. If the notches do not overlap, medians are different.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geoemetric-object-using-geom_violin",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geoemetric-object-using-geom_violin",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8 Geoemetric object using geom_violin",
    "text": "1.7.8 Geoemetric object using geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom_point",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geometric-objects-using-geom_point",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9 Geometric Objects using geom_point()",
    "text": "1.7.9 Geometric Objects using geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geom-objects-can-be-combined-into-a-single-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geom-objects-can-be-combined-into-a-single-plot",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10 geom objects can be combined into a single plot",
    "text": "1.7.10 geom objects can be combined into a single plot\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#statistics-with-r",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#statistics-with-r",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.1 Statistics with R",
    "text": "1.8.1 Statistics with R\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#stat_summary-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#stat_summary-method",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.2 stat_summary() method",
    "text": "1.8.2 stat_summary() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geom-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#geom-method",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.3 geom() method",
    "text": "1.8.3 geom() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#plotting-a-best-fit-curve",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#plotting-a-best-fit-curve",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.4 Plotting a best fit curve",
    "text": "1.8.4 Plotting a best fit curve\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#facet_wrap",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#facet_wrap",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1 facet_wrap()",
    "text": "1.9.1 facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#facet_grid-function",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#facet_grid-function",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#working-with-coordinate",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#working-with-coordinate",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#changing-the-range-of-x-and-y-axis",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#changing-the-range-of-x-and-y-axis",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.2 Changing the range of x and y axis",
    "text": "1.10.2 Changing the range of x and y axis\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#working-with-theme",
    "href": "Hands_On_Exercise/Hands_On_Exercise_1/Hands_On_Exercise_1.html#working-with-theme",
    "title": "Hands_On_Exercise_1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#installing-and-loading-the-required-libraries",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#installing-and-loading-the-required-libraries",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#importing-the-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#importing-the-data",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.2.2 Importing the data",
    "text": "2.2.2 Importing the data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#beyond-ggplot2-themes",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#beyond-ggplot2-themes",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#working-with-ggtheme-package",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#working-with-ggtheme-package",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#working-with-hrbthems-package",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#working-with-hrbthems-package",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nNote that: axis_title_size - for font size base_size - axis label grid - used to remove x-axis grids"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#beyond-single-graph",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#beyond-single-graph",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods ",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods \nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#combining-two-ggplot2-graphs",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#combining-two-ggplot2-graphs",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\np1 + p2"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#combining-three-ggplot2-graphs",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#combining-three-ggplot2-graphs",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-a-composite-figure-with-tag",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-a-composite-figure-with-tag",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-figure-with-insert",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-figure-with-insert",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#working-with-ggrepel",
    "href": "Hands_On_Exercise/Hands_On_Exercise_2/Hands_On_Exercise_2.html#working-with-ggrepel",
    "title": "Hands_On_Exercise_2: Beyond ggplot2 fundamentals",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html",
    "href": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html",
    "title": "In_Class_Exercise_4",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels, ggdist, ggridges, ggthemes,\n               colorspace)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n       aes(x= ENGLISH,\n           y=CLASS))+\n  geom_boxplot()"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html#installing-and-loading-r-packages",
    "href": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html#installing-and-loading-r-packages",
    "title": "In_Class_Exercise_4",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels, ggdist, ggridges, ggthemes,\n               colorspace)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n       aes(x= ENGLISH,\n           y=CLASS))+\n  geom_boxplot()"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html#visualising-the-target-variable",
    "href": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html#visualising-the-target-variable",
    "title": "In_Class_Exercise_4",
    "section": "Visualising the target variable",
    "text": "Visualising the target variable\n\nggplot(data = churn_telecom,\n       aes(x = CHURN_FLG))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(x=ENGLISH,\n           y=CLASS))+\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\",.3),\n    color = \"white\"\n  ) + \n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add=c(0.2,2.6))) + \ntheme_ridges()\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(x=RACE,\n           y=ENGLISH))+\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width=0,\n               point_colour = NA)+\n  geom_boxplot(width = .20,\n               outlier.shape=NA)+\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth=.5,\n            dotsize=2)"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html#importing-sas-data-into-r-environment",
    "href": "In_Class_Exercise/In_Class_Exercise_4/In_Class_Exercise_4.html#importing-sas-data-into-r-environment",
    "title": "In_Class_Exercise_4",
    "section": "Importing SAS data into R environment",
    "text": "Importing SAS data into R environment\n\nchurn_telecom &lt;- read_sas(\"data/churn_telecom.sas7bdat\") %&gt;%\n  mutate(CHURN_FLG =factor(\n    CHURN_FLG,\n    levels = c(\"1\",\"0\"),\n    labels = c(\"Churn\",\"Non-Churn\")))"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#getting-started",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#getting-started",
    "title": "Hands_On_Exercise_3",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#importing-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#importing-data",
    "title": "Hands_On_Exercise_3",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands_On_Exercise_3",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands_On_Exercise_3",
    "section": "",
    "text": "Below shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#displaying-multiple-information-on-tooltip",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#displaying-multiple-information-on-tooltip",
    "title": "Hands_On_Exercise_3",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\nDisplaying multiple information on tooltip\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#customising-tooltip-style",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#customising-tooltip-style",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#displaying-statistics-on-tooltip",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#displaying-statistics-on-tooltip",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#styling-hover-effect",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#styling-hover-effect",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#combining-tooltip-and-hover-effect",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#combining-tooltip-and-hover-effect",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#click-effect-with-onclick",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#click-effect-with-onclick",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands_On_Exercise_3",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands_On_Exercise_3",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands_On_Exercise_3",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands_On_Exercise_3",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands_On_Exercise_3",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#coordinated-multiple-views-with-plotly",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#coordinated-multiple-views-with-plotly",
    "title": "Hands_On_Exercise_3",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#interactive-data-table-dt-package",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#interactive-data-table-dt-package",
    "title": "Hands_On_Exercise_3",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#linked-brushing-crosstalk-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#linked-brushing-crosstalk-method",
    "title": "Hands_On_Exercise_3",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#overview",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#overview",
    "title": "Hands_On_Exercise_3",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#basic-concepts-of-animation",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#basic-concepts-of-animation",
    "title": "Hands_On_Exercise_3",
    "section": "4.1.1 Basic concepts of animation",
    "text": "4.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#terminology",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#terminology",
    "title": "Hands_On_Exercise_3",
    "section": "4.1.2 Terminology",
    "text": "4.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#loading-the-r-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#loading-the-r-packages",
    "title": "Hands_On_Exercise_3",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colorsscheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#importing-the-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#importing-the-data",
    "title": "Hands_On_Exercise_3",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nWarning: `mutate_each_()` was deprecated in dplyr 0.7.0.\nℹ Please use `across()` instead.\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(col, as.factor)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(col)\n\n  # Now:\n  data %&gt;% select(all_of(col))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands_On_Exercise_3",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-a-static-population-bubble-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-a-static-population-bubble-plot",
    "title": "Hands_On_Exercise_3",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-the-animated-bubble-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-the-animated-bubble-plot",
    "title": "Hands_On_Exercise_3",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands_On_Exercise_3",
    "section": "4.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7):\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands_On_Exercise/Hands_On_Exercise_3/Hands_On_Exercise_3.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands_On_Exercise_3",
    "section": "4.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#learning-outcome",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#learning-outcome",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#data-import",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#data-import",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.2.2 Data import",
    "text": "9.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "9.3 Visualising Distribution with Ridgeline Plot",
    "text": "9.3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-launching-r-packages",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-launching-r-packages",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.1 Installing and launching R packages",
    "text": "10.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-data",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-data",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.2 Importing data",
    "text": "10.3.2 Importing data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#one-sample-test-gghistostatsmethod",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#one-sample-test-gghistostatsmethod",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.3 One-sample test: gghistostats()method",
    "text": "10.3.3 One-sample test: gghistostats()method\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#unpacking-the-bayes-factor",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#unpacking-the-bayes-factor",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.4 Unpacking the Bayes Factor",
    "text": "10.3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#how-to-interpret-bayes-factor",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#how-to-interpret-bayes-factor",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.5 How to interpret Bayes Factor",
    "text": "10.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakersin 2013:"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "10.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-excel-file-readxl-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-excel-file-readxl-methods",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.1 Importing Excel file: readxl methods",
    "text": "10.6.1 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\npacman::p_load(readxl, performance, parameters, see)\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.5 Model Diagnostic: Check model for homogeneity of variances",
    "text": "10.6.5 Model Diagnostic: Check model for homogeneity of variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-complete-check",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#model-diagnostic-complete-check",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.6 Model Diagnostic: Complete check",
    "text": "10.6.6 Model Diagnostic: Complete check\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-regression-parameters-see-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-regression-parameters-see-methods",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.7 Visualising Regression Parameters: see methods",
    "text": "10.6.7 Visualising Regression Parameters: see methods\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "10.6.8 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "10.6.8 Visualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-loading-the-packages-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-loading-the-packages-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.2.1 Installing and loading the packages",
    "text": "11.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#data-import-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#data-import-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.2.2 Data import",
    "text": "11.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.4.3 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#launch-the-application-in-r",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#launch-the-application-in-r",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.5.2 Launch the application in R",
    "text": "11.5.2 Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "11.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "11.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-launching-r-packages-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#installing-and-launching-r-packages-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.2 Installing and Launching R Packages",
    "text": "12.2 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-data-1",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#importing-data-1",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.3 Importing Data",
    "text": "12.3 Importing Data\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.4.1 FunnelPlotR methods: The basic plot",
    "text": "12.4.1 FunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#computing-the-basic-derived-fields",
    "href": "Hands_On_Exercise/Hands_On_Exercise_4/Hands_On_Exercise_4.html#computing-the-basic-derived-fields",
    "title": "Hands_On_Exercise_4: Visualising Distribution",
    "section": "12.5.1 Computing the basic derived fields",
    "text": "12.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  }
]